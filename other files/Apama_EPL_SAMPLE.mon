Ejemplos EPL Apama

event UtilizationThreshold {
//	string alert_rule_id; //UT + uniquenumber
	string customerID;
	string customerName;
	string campusID;
	string campusName;
	string buildingID;
	string buildingName;
	string floorID;
	string floorName;
	string zoneID;
	string zoneName;
	string assetType;
	string interval; //hour, day, week, month, year
	string above_below; //above threshold or below threshold
	string measure; //numberPages, numberJobs, tonerLevel
	float measureValue;
	float metricPercent;
	
    action createKey() returns string {
    	return customerID + "-" + campusID + "-" + buildingID + "-" + floorID + "-" + zoneID + "-" + assetType + "-" + interval + "-" + measure + "-" + above_below;
    }
    
	action getRow( MemStoreUtil util, com.apama.memorystore.Table t ) returns com.apama.memorystore.Row {
		com.apama.memorystore.Row r := t.get( createKey() );
		r := util.populateRow( r, self.getFieldNames(), self.getFieldTypes(), self.getFieldValues() );
		return r;
	}
	action findRow( MemStoreUtil util, com.apama.memorystore.Table t ) returns com.apama.memorystore.Row {
		com.apama.memorystore.Row r := t.get( createKey() );
		return r;
	}
}

// Ejemplo de Streaming
monitor StreamingTemperatureCalculation {
	
	DVEventUtility dvTemperatureKPI     :=  new DVEventUtility;

	
	action onload() {
		
		// Setup a real-time data view for the authorization KPI
		dvTemperatureKPI.start
		(
		   "Temperature KPI", 
		   TemperatureKPI.getFieldNames(), TemperatureKPI.getFieldTypes(), (new TemperatureKPI).getFieldKeys()
		 );		
		TemperatureKPI tempkpi;
		
		
		// Setup a stream to calculate key indicators over the moving window
		stream<Temperature> tempstream := all Temperature();
		from temp in tempstream
		  partition by temp.machinename
		  within 60.0 every 10.0
		  group by temp.machinename
		  select TemperatureKPI(temp.machinename, avg(temp.value), count()):tempkpi {
			
			//
			dvTemperatureKPI.addOrUpdate(tempkpi.getFieldValues());
			
			
		}
		
		
		
		
	}
	
	
}

package com.apama.lab.oms;

monitor Simulator 
{
	action onload()
	{
		NewOrder n;
		on all NewOrder(): n 
		{
			on wait (3.0) 
			{
				route OrderFinished(n.orderId, n.symbol, n.side, n.type, n.price, n.qty);
			}
		}
	}
	
	
}

